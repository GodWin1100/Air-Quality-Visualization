{"version":3,"sources":["firebase.js","wardMap/mapChartSeq.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","MapChart","setTooltipContent","useState","choice","setchoice","data","setData","socialDemo","setsocialDemo","health","sethealth","layer","setLayer","switchParam","e","loadContent","target","name","value","docs","events","collection","doc","get","then","snapshot","forEach","id","push","querySnapshot","tempDoc","events1","socialdemo","Health","i","settingValues","useEffect","a","anyNameFunction","coordinates","position","setPosition","zoom","setzoom","param","domain","attr","colorScale","scale","range","colour","style","border","padding","top","backgroundColor","margin","type","max","min","step","onChange","left","borderBottom","width","display","justifyContent","alignItems","className","for","onClick","defaultValue","disabled","map","fontSize","fontWeight","borderRadius","color","key","toUpperCase","textAlign","textTransform","data-tip","projectionConfig","center","translate","height","onMoveEnd","geography","geographies","geo","cur","find","ward","properties","onMouseEnter","bar","Bart","AQI","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Legend","Object","keys","sort","Bar","fill","LabelList","datakey","content","strokeWidth","stroke","card","onMouseLeave","hover","outline","rsmKey","centroid","geoCentroid","y","textAnchor","userSelect","App","setContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46f495cc.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\n\r\n// Add the Firebase products that you want to use\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDmoUrjYrMEuIeqkp5WjG-slLHKwRkh7O0\",\r\n  authDomain: \"deepblue-aqv.firebaseapp.com\",\r\n  projectId: \"deepblue-aqv\",\r\n  storageBucket: \"deepblue-aqv.appspot.com\",\r\n  messagingSenderId: \"935017759812\",\r\n  appId: \"1:935017759812:web:c758e09ce2ad5b7ef26811\",\r\n  measurementId: \"G-3KVGE9ZKM8\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = firebase.firestore();\r\nexport default firebase","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  ZoomableGroup,\r\n  Marker,\r\n} from \"react-simple-maps\";\r\nimport * as scale from \"d3-scale\";\r\nimport { csv } from \"d3-fetch\";\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport { db } from \"../firebase\";\r\nimport \"./../App.css\";\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Legend,\r\n  LabelList,\r\n} from \"recharts\";\r\n\r\nconst geoUrl = \"./mumbai_wards.json\";\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n  const [choice, setchoice] = useState(\"air_quality\");\r\n  const [data, setData] = useState([]);\r\n  const [socialDemo, setsocialDemo] = useState([]);\r\n  const [health, sethealth] = useState([]);\r\n  const [layer, setLayer] = useState([]);\r\n  //square brackets used to destructure array, curly brackets for objects\r\n  //useState([]) is a React hook which returns the state variable eg:data and a function to update it eg:setData\r\n  const switchParam = (e) => {\r\n    loadContent(e.target.name, e.target.value);\r\n  };\r\n\r\n  const loadContent = (name, value) => {\r\n    // console.log(name);\r\n    if (value !== \"\") {\r\n      const docs = [];\r\n\r\n      const events = db.collection(\"wards\");\r\n      events\r\n        .doc(\"2q0Z3Lumg7zlyEIvj9kK\")\r\n        .collection(\"data\")\r\n        .get()\r\n        .then((snapshot) => {\r\n          snapshot.forEach((doc) => {\r\n            if (\r\n              doc.id === \"air_quality\" ||\r\n              doc.id === \"social_demo\" ||\r\n              doc.id === \"health\"\r\n            ) {\r\n              docs.push();\r\n            } else {\r\n              docs.push(doc.id);\r\n            }\r\n          });\r\n        });\r\n\r\n      events.get().then((querySnapshot) => {\r\n        const tempDoc = [];\r\n\r\n        querySnapshot.forEach((doc) => {\r\n          let events1 = null;\r\n          //  events.doc(doc.id).collection(\"data\").get().then((snapshot)=>)\r\n\r\n          if (name === \"social_demo\" || name === \"health\") {\r\n            events1 = events\r\n              .doc(doc.id)\r\n              .collection(\"data\")\r\n              .doc(name)\r\n              .collection(\"year\")\r\n              .doc(value);\r\n          } else {\r\n            events1 = events.doc(doc.id).collection(\"data\").doc(name);\r\n\r\n            events\r\n              .doc(doc.id)\r\n              .collection(\"data\")\r\n              .doc(\"social_demo\")\r\n              .collection(\"year\")\r\n              .get()\r\n              .then((querySnapshot) => {\r\n                let socialdemo = [];\r\n                querySnapshot.forEach((doc) => {\r\n                  socialdemo.push(doc.id);\r\n                  // setsocialDemo(socialDemo.push(doc.id));\r\n                });\r\n                if (socialDemo !== socialdemo) {\r\n                  setsocialDemo(socialdemo);\r\n                }\r\n              });\r\n\r\n            events\r\n              .doc(doc.id)\r\n              .collection(\"data\")\r\n              .doc(\"health\")\r\n              .collection(\"year\")\r\n              .get()\r\n              .then((querySnapshot) => {\r\n                let Health = [];\r\n\r\n                querySnapshot.forEach((doc) => {\r\n                  // sethealth(health.push(doc.id));\r\n                  Health.push(doc.id);\r\n                });\r\n                if (health !== Health) {\r\n                  sethealth(Health);\r\n                }\r\n              });\r\n          }\r\n          events1.get().then((i) => {\r\n            tempDoc.push(i.data());\r\n          });\r\n        });\r\n        setData(tempDoc);\r\n        settingValues(name);\r\n        // console.log(docs.length);\r\n\r\n        // docs.filter((key) => {\r\n        //   console.log(key);\r\n        //   return (\r\n        //     key === \"air_quality\" || key === \"social_demo\" || key === \"health\"\r\n        //   );\r\n        // });\r\n        if (docs !== layer || docs !== []) {\r\n          setLayer(docs);\r\n        }\r\n        // }\r\n      });\r\n    }\r\n  };\r\n\r\n  const settingValues = (name) => {\r\n    setchoice(name);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function anyNameFunction() {\r\n      await loadContent(\"air_quality\", \"Air Quality\");\r\n    }\r\n    // Execute the created function directly\r\n    anyNameFunction();\r\n  }, []);\r\n\r\n  // setting center for zoom\r\n  const [position, setPosition] = useState({\r\n    coordinates: [72.8777, 19.089],\r\n    // zoom: 1,\r\n  });\r\n\r\n  const [zoom, setzoom] = useState(1);\r\n  function handleZoomIn() {\r\n    if (position.zoom >= 4) return;\r\n    setPosition((pos) => ({ ...pos, zoom: pos.zoom * 2 }));\r\n  }\r\n\r\n  function handleZoomOut() {\r\n    if (position.zoom <= 1) return;\r\n    setPosition((pos) => ({ ...pos, zoom: pos.zoom / 2 }));\r\n  }\r\n\r\n  function handleMoveEnd(position) {\r\n    setPosition(position);\r\n  }\r\n  let param = {};\r\n  switch (choice) {\r\n    case \"social_demo\":\r\n      param.domain = [100000, 1000000];\r\n      param.attr = \"population\";\r\n      break;\r\n    case \"health\":\r\n      param.domain = [20, 100];\r\n      param.attr = \"malaria\";\r\n      break;\r\n    case \"air_quality\":\r\n      param.domain = [100, 250];\r\n      param.attr = \"AQI\";\r\n      break;\r\n    default:\r\n      param.domain = [100, 250];\r\n      param.attr = \"AQI\";\r\n      break;\r\n  }\r\n  const colorScale = scale\r\n    .scaleQuantize()\r\n    .domain(param.domain)\r\n    .range([\r\n      \"#ffedea\",\r\n      \"#ffcec5\",\r\n      \"#ffad9f\",\r\n      \"#ff8a75\",\r\n      \"#ff5533\",\r\n      \"#e2492d\",\r\n      \"#be3d26\",\r\n      \"#9a311f\",\r\n      \"#782618\",\r\n    ]);\r\n\r\n  const card = (bar) => {\r\n    let data = [];\r\n    data = { ...bar[0] };\r\n\r\n    // console.log(Object.keys(data));\r\n\r\n    return (\r\n      <div>\r\n        <h2>Ward:{data[\"ward\"]}</h2>\r\n        {\r\n          Object.keys(data)\r\n            .sort()\r\n            .map((key, i) => {\r\n              return key !== \"ward\" ? (\r\n                <h4>\r\n                  {key.toUpperCase()}:{data[key]}\r\n                </h4>\r\n              ) : null;\r\n            })\r\n          // <h2>Ward: {data.ward}</h2>\r\n          // <h4>Population: {data.population}</h4>\r\n          // <h4>Sex Ratio: {data.sex_ratio}</h4>\r\n          // <h4>Literacy: {data.literacy}</h4>\r\n          // <h4>Literacy Female: {data.literacy_female}</h4>\r\n          // <h4>Literacy Male: {data.literacy_male}</h4>\r\n          // <h4>Work Participation Female: {data.work_participation_female}</h4>\r\n          // <h4>Work Participation Male: {data.work_participation_male}</h4>\r\n          // <h4>Scheduled Caste: {data.scheduled_caste}</h4>\r\n          // <h4>Scheduled Tribe: {data.scheduled_tribe}</h4>\r\n        }\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const colour = [\"#ff6600\", \"#ff66ff\", \"#00ffff\", \"#ffcccc\", \"#ffff00\", \"#ffffff\",\"#00ccff\",\"#66ff66\"];\r\n  return (\r\n    <div style={{ border: \"2px black solid\" }}>\r\n      {data ? (\r\n        <>\r\n          <div\r\n            style={{\r\n              padding: \"5px 10px\",\r\n              position: \"fixed\",\r\n              top: \"40%\",\r\n              backgroundColor: \"#eee8\",\r\n              border: \"1px solid black\",\r\n            }}\r\n          >\r\n            <h4 style={{ margin: \"5px\" }}>Zoom: {zoom}x</h4>\r\n            <input\r\n              type=\"range\"\r\n              max={3}\r\n              min={0.5}\r\n              step={0.5}\r\n              value={zoom}\r\n              onChange={(e) => {\r\n                setzoom(+e.target.value);\r\n              }}\r\n            />\r\n            {/*\r\n              <button onClick={handleZoomIn}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"3\"\r\n                >\r\n                  <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\r\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n                </svg>\r\n              </button>\r\n              <br />\r\n             \r\n              <button onClick={handleZoomOut}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"3\"\r\n                >\r\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n                </svg>\r\n              </button> */}\r\n          </div>\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              backgroundColor: \"#aaab\",\r\n              top: 0,\r\n              left: 0,\r\n              borderBottom: \"1px solid #222\",\r\n              padding: \".5em\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-evenly\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <div className=\"Holder\">\r\n                <label for=\"1\">Social Demo</label>\r\n                <select\r\n                  id=\"1\"\r\n                  name=\"social_demo\"\r\n                  onChange={(e) => switchParam(e)}\r\n                  onClick={(e) => switchParam(e)}\r\n                  // checked={choice === 1 ? true : false}\r\n                >\r\n                  <option defaultValue=\"\" disabled>\r\n                    Select\r\n                  </option>\r\n                  {/* <option value=\"2011\">2011</option> */}\r\n                  {socialDemo !== []\r\n                    ? socialDemo.map((e) => {\r\n                        return <option value={e}>{e}</option>;\r\n                      })\r\n                    : null}\r\n                </select>\r\n              </div>\r\n              <div className=\"Holder\">\r\n                <label for=\"2\">Health</label>\r\n                <select\r\n                  id=\"2\"\r\n                  name=\"health\"\r\n                  onChange={(e) => switchParam(e)}\r\n                  // checked={choice === 2 ? true : false}\r\n                >\r\n                  <option defaultValue=\"\" disabled>\r\n                    Select\r\n                  </option>\r\n                  {health !== []\r\n                    ? health.map((e) => {\r\n                        return <option value={e}>{e}</option>;\r\n                      })\r\n                    : null}\r\n\r\n                  {/* <option value=\"2014\">2014</option>\r\n              <option value=\"2015\">2015</option> */}\r\n                  {/* {\r\n                  if()\r\n                } */}\r\n                </select>\r\n              </div>\r\n              <input\r\n                style={{\r\n                  fontSize: \"1em\",\r\n                  fontWeight: \"bold\",\r\n                  backgroundColor: \"#3399ff\",\r\n                  borderRadius: \"10px\",\r\n                  border: \"1px solid black\",\r\n                  padding: \".6em 1em\",\r\n                  color:\"white\"\r\n                }}\r\n                id=\"3\"\r\n                type=\"button\"\r\n                name=\"air_quality\"\r\n                onClick={(e) => switchParam(e)}\r\n                value=\"Air Quality\"\r\n              />\r\n              {layer !== []\r\n                ? layer.map((key, i) => {\r\n                    return (\r\n                      <input\r\n                        key={key + i}\r\n                        value={key.toUpperCase()}\r\n                        name={key}\r\n                        type=\"button\"\r\n                        style={{\r\n                          fontSize: \"1em\",\r\n                          fontWeight: \"bold\",\r\n                          backgroundColor: \"#3399ff\",\r\n                          borderRadius: \"10px\",\r\n                          border: \"1px solid black\",\r\n                          padding: \".6em 1em\",\r\n                          color:\"white\"\r\n                        }}\r\n                        onClick={(e) => switchParam(e)}\r\n                      />\r\n                    );\r\n                  })\r\n                : null}\r\n            </div>\r\n            <hr />\r\n            <h2\r\n              style={{\r\n                margin: 0,\r\n                padding: 0,\r\n                textAlign: \"center\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              {choice}\r\n            </h2>\r\n          </div>\r\n          <ComposableMap\r\n            data-tip=\"\"\r\n            projectionConfig={{\r\n              center: [72.8777, 19.089], // Approximately the coordinates of Mumbai (slightly North)\r\n              scale: 90000,\r\n              translate: [1060 / 2, 310],\r\n            }}\r\n            width={1060}\r\n            height={800}\r\n            style={{ border: \"1px solid black\" }}\r\n          >\r\n            <ZoomableGroup\r\n              zoom={zoom}\r\n              center={position.coordinates}\r\n              onMoveEnd={handleMoveEnd}\r\n            >\r\n              <Geographies geography={geoUrl}>\r\n                {({ geographies }) => (\r\n                  <>\r\n                    {geographies.map((geo) => {\r\n                      const cur = data.find(\r\n                        (data) => data.ward === geo.properties.name\r\n                      );\r\n                      return (\r\n                        <Geography\r\n                          key={geo.rsmKey}\r\n                          geography={geo}\r\n                          onMouseEnter={() => {\r\n                            // console.log(health, socialDemo);\r\n\r\n                            // if (choice === \"social_demo\") {\r\n                            //   setTooltipContent(\"Loading\");\r\n                            //   if (cur) {\r\n                            //     let bar = [];\r\n                            //     bar.push(cur);\r\n                            //     setTooltipContent(card(bar));\r\n                            //   }\r\n                            // }\r\n                            if (choice === \"air_quality\") {\r\n                              setTooltipContent(\"Loading\");\r\n                              if (cur) {\r\n                                let bar = [];\r\n                                bar.push(cur);\r\n                                let Bart = { ...bar[0] };\r\n                                // console.log(Bart);\r\n\r\n                                setTooltipContent(\r\n                                  <div style={{ textAlign: \"center\" }}>\r\n                                    <h2>Ward: {cur?.ward}</h2>\r\n                                    <h3>AQI: {cur?.AQI}</h3>\r\n                                    <BarChart\r\n                                      width={500}\r\n                                      height={400}\r\n                                      data={bar}\r\n                                    >\r\n                                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                      <XAxis dataKey=\"ward\" fontSize=\"16px\" />\r\n                                      <YAxis />\r\n                                      <Legend />\r\n                                      {Object.keys(Bart)\r\n                                        .sort()\r\n                                        .map((key, i) => {\r\n                                          return (\r\n                                            <Bar dataKey={key} fill={colour[i]}>\r\n                                              <LabelList\r\n                                                fill=\"#fff\"\r\n                                                datakey=\"ward\"\r\n                                                content={Bart[key]}\r\n                                                fontWeight=\"bold\"\r\n                                                strokeWidth=\".5px\"\r\n                                                stroke=\"black\"\r\n                                              />\r\n                                            </Bar>\r\n                                          );\r\n                                        })}\r\n                                      {/* <Bar dataKey=\"O3\" fill=\"darkgreen\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur.O3}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                      <Bar dataKey=\"PM2.5\" fill=\"#00f\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur[\"PM2.5\"]}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                      <Bar dataKey=\"PM10\" fill=\"purple\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur.PM10}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                      <Bar dataKey=\"SO2\" fill=\"orange\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur.SO2}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar> */}\r\n                                    </BarChart>\r\n                                  </div>\r\n                                );\r\n                              }\r\n                            } else if (choice === \"health\") {\r\n                              setTooltipContent(\"Loading\");\r\n                              if (cur) {\r\n                                let bar = [];\r\n                                bar.push(cur);\r\n                                let Bart = { ...bar[0] };\r\n                                // console.log(Bart);\r\n                                setTooltipContent(\r\n                                  <BarChart width={500} height={400} data={bar}>\r\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                    <XAxis dataKey=\"ward\" fontSize=\"16px\" />\r\n                                    <YAxis />\r\n                                    <Legend />\r\n                                    {Object.keys(Bart)\r\n                                      .sort()\r\n                                      .map((key, i) => {\r\n                                        return (\r\n                                          <Bar dataKey={key} fill={colour[i]}>\r\n                                            <LabelList\r\n                                              fill=\"#fff\"\r\n                                              datakey=\"ward\"\r\n                                              content={Bart[key]}\r\n                                              fontWeight=\"bold\"\r\n                                              strokeWidth=\".3px\"\r\n                                              stroke=\"black\"\r\n                                            />\r\n                                          </Bar>\r\n                                        );\r\n                                      })}\r\n                                    {/* <Bar dataKey=\"diabetes\" fill=\"darkgreen\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.diabetes}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"hypertension\" fill=\"#00f\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.hypertension}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"malaria\" fill=\"purple\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.malaria}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"tuberculosis\" fill=\"orange\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.tuberculosis}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"diarrhoea\" fill=\"#f0f\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.diarrhoea}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar> */}\r\n                                  </BarChart>\r\n                                );\r\n                              }\r\n                            } else {\r\n                              setTooltipContent(\"Loading\");\r\n                              if (cur) {\r\n                                let bar = [];\r\n                                bar.push(cur);\r\n                                setTooltipContent(card(bar));\r\n                              }\r\n                            }\r\n                          }}\r\n                          onMouseLeave={() => {\r\n                            setTooltipContent(\"\");\r\n                          }}\r\n                          style={{\r\n                            hover: {\r\n                              fill: \"#459CAF\",\r\n                              outline: \"none\",\r\n                            },\r\n                          }}\r\n                          fill={\r\n                            choice === \"air_quality\" || choice === \"social_demo\"\r\n                              ? colorScale(cur ? cur[param.attr] : \"#eee\")\r\n                              : \"#aaa\"\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                    {geographies.map((geo) => {\r\n                      const centroid = geoCentroid(geo);\r\n                      const cur = data.find(\r\n                        (data) => data.ward === geo.properties.name\r\n                      );\r\n                      return (\r\n                        <g key={geo.rsmKey}>\r\n                          {\r\n                            <Marker coordinates={centroid}>\r\n                              <text\r\n                                y=\"2\"\r\n                                fontSize={8}\r\n                                textAnchor=\"middle\"\r\n                                style={{ userSelect: \"none\" }}\r\n                              >\r\n                                {cur?.ward}\r\n                              </text>\r\n                            </Marker>\r\n                          }\r\n                        </g>\r\n                      );\r\n                    })}\r\n                  </>\r\n                )}\r\n              </Geographies>\r\n            </ZoomableGroup>\r\n          </ComposableMap>\r\n        </>\r\n      ) : (\r\n        <h2>Loading</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n","// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import {\n//   ComposableMap,\n//   Geographies,\n//   Geography,\n//   ZoomableGroup,\n// } from \"react-simple-maps\";\n// import * as d3 from \"d3\";\n// // url to a valid topojson file\n// const geoUrl = \"./mumbai_wards.json\";\nimport React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport MapChart from \"./wardMap/mapChartSeq\";\nimport WardMap from \"./wardMap/wardMap\";\n\nconst App = () => {\n  //   var featureCollection = topojson.feature(topology, topology.objects.governorates);\n  // var bounds = d3.geo.bounds(featureCollection);\n  // var centerX = d3.sum(bounds, function(d) {return d[0];}) / 2,\n  //     var centerY = d3.sum(bounds, function(d) {return d[1];}) / 2;\n  const [content, setContent] = useState(\"\");\n  return (\n    <div>\n      <MapChart setTooltipContent={setContent} />\n      <ReactTooltip>{content}</ReactTooltip>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}