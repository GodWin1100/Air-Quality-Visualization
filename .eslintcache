[{"D:\\AQV\\aqv\\src\\index.js":"1","D:\\AQV\\aqv\\src\\reportWebVitals.js":"2","D:\\AQV\\aqv\\src\\App.js":"3","D:\\AQV\\aqv\\src\\wardMap\\wardMap.js":"4","D:\\AQV\\aqv\\src\\wardMap\\mapChart1.js":"5","D:\\AQV\\aqv\\src\\wardMap\\mapChart.js":"6","D:\\AQV\\aqv\\src\\wardMap\\mapChart_j.js":"7","D:\\AQV\\aqv\\src\\firebase.js":"8","D:\\AQV\\aqv\\src\\wardMap\\mapChart_k.js":"9","D:\\AQV\\aqv\\src\\wardMap\\mapChart_o.js":"10","D:\\AQV\\aqv\\src\\wardMap\\mapChartSeq.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":962,"mtime":1615466485266,"results":"15","hashOfConfig":"13"},{"size":944,"mtime":1608981389555,"results":"16","hashOfConfig":"13"},{"size":1391,"mtime":1609304055091,"results":"17","hashOfConfig":"13"},{"size":4424,"mtime":1611577319187,"results":"18","hashOfConfig":"13"},{"size":8726,"mtime":1612444849534,"results":"19","hashOfConfig":"13"},{"size":589,"mtime":1611743758000,"results":"20","hashOfConfig":"13"},{"size":8720,"mtime":1613628267637,"results":"21","hashOfConfig":"13"},{"size":18809,"mtime":1614680803322,"results":"22","hashOfConfig":"13"},{"size":25522,"mtime":1615744376037,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"oftpuj",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"26"},"D:\\AQV\\aqv\\src\\index.js",[],["58","59"],"D:\\AQV\\aqv\\src\\reportWebVitals.js",[],"D:\\AQV\\aqv\\src\\App.js",["60"],"// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import {\n//   ComposableMap,\n//   Geographies,\n//   Geography,\n//   ZoomableGroup,\n// } from \"react-simple-maps\";\n// import * as d3 from \"d3\";\n// // url to a valid topojson file\n// const geoUrl = \"./mumbai_wards.json\";\nimport React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport MapChart from \"./wardMap/mapChartSeq\";\nimport WardMap from \"./wardMap/wardMap\";\n\nconst App = () => {\n  //   var featureCollection = topojson.feature(topology, topology.objects.governorates);\n  // var bounds = d3.geo.bounds(featureCollection);\n  // var centerX = d3.sum(bounds, function(d) {return d[0];}) / 2,\n  //     var centerY = d3.sum(bounds, function(d) {return d[1];}) / 2;\n  const [content, setContent] = useState(\"\");\n  return (\n    <div>\n      <MapChart setTooltipContent={setContent} />\n      <ReactTooltip>{content}</ReactTooltip>\n    </div>\n  );\n};\n\nexport default App;\n","D:\\AQV\\aqv\\src\\wardMap\\wardMap.js",["61","62","63"],"import React, { Component } from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  ZoomableGroup,\r\n} from \"react-simple-maps\";\r\nimport * as d3 from \"d3\";\r\n// url to a valid topojson file\r\nconst geoUrl = \"./mumbai_wards.json\";\r\n\r\nconst wardMap = () => {\r\n  return (\r\n    <div>\r\n      <ComposableMap\r\n        projectionConfig={{\r\n          center: [72.8777, 19.089], // Approximately the coordinates of Mumbai (slightly North)\r\n          scale: 90000,\r\n          translate: [1060 / 2, 310],\r\n        }}\r\n        width={1060}\r\n        height={800}\r\n        // style={{\r\n        //   color: \"black\",\r\n        // }}\r\n      >\r\n        <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map((geo) => (\r\n              <Geography key={geo.rsmKey} geography={geo} />\r\n            ))\r\n          }\r\n        </Geographies>\r\n      </ComposableMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default wardMap;\r\n","D:\\AQV\\aqv\\src\\wardMap\\mapChart1.js",[],["64","65"],"D:\\AQV\\aqv\\src\\wardMap\\mapChart.js",[],"D:\\AQV\\aqv\\src\\wardMap\\mapChart_j.js",["66","67","68","69"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  ZoomableGroup,\r\n  Marker,\r\n} from \"react-simple-maps\";\r\nimport * as scale from \"d3-scale\";\r\nimport { csv } from \"d3-fetch\";\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport axios from \"axios\";\r\nimport { db } from \"../firebase\";\r\nclass MapChart extends React.Component {\r\n  state = {\r\n    data: [],\r\n    // position:{\r\n    coordinates: [72.8777, 19.089],\r\n    zoom: 0.8,\r\n    setData: false,\r\n    // }\r\n    parameter: 1,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const events = db.collection(\"pop_health\");\r\n    events.get().then((querySnapshot) => {\r\n      const tempDoc = [];\r\n      querySnapshot.forEach((doc) => {\r\n        tempDoc.push(doc.data());\r\n      });\r\n      this.setState({ data: tempDoc, setData: true });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let param = {};\r\n    switch (this.state.parameter) {\r\n      case 1:\r\n        param.domain = [100000, 1000000];\r\n        param.attr = \"Population\";\r\n        break;\r\n      case 2:\r\n        param.domain = [20, 300];\r\n        param.attr = \"Malaria\";\r\n        break;\r\n      case 3:\r\n        param.domain = [0, 150];\r\n        param.attr = \"Dengue\";\r\n        break;\r\n      case 4:\r\n        param.domain = [90, 500];\r\n        param.attr = \"Tuberculosis\";\r\n        break;\r\n      case 5:\r\n        param.domain = [2000, 5000];\r\n        // need to change color scheme range\r\n        param.attr = \"Diarrhoea\";\r\n        break;\r\n      case 6:\r\n        param.domain = [200, 1500];\r\n        param.attr = \"Diabetes\";\r\n        break;\r\n      case 7:\r\n        param.domain = [100, 1800];\r\n        param.attr = \"Hypertension\";\r\n        break;\r\n      default:\r\n        param.domain = [100000, 1000000];\r\n        param.attr = \"Population\";\r\n        break;\r\n    }\r\n\r\n    const switchParam = (val) => {\r\n      this.setState({ parameter: val });\r\n    };\r\n\r\n    const geoUrl = \"./mumbai_wards.json\";\r\n\r\n    const colorScale = scale\r\n      .scaleQuantize()\r\n      .domain(param.domain)\r\n      .range([\r\n        \"#ffedea\",\r\n        \"#ffcec5\",\r\n        \"#ffad9f\",\r\n        \"#ff8a75\",\r\n        \"#ff5533\",\r\n        \"#e2492d\",\r\n        \"#be3d26\",\r\n        \"#9a311f\",\r\n        \"#782618\",\r\n      ]);\r\n\r\n    const handleZoomIn = () => {\r\n      if (this.state.zoom >= 4) {\r\n        this.setState({ zoom: this.state.zoom * 2 });\r\n      }\r\n    };\r\n\r\n    const handleZoomOut = () => {\r\n      if (this.state.zoom <= 1) {\r\n        this.setState({ zoom: this.state.zoom / 2 });\r\n      }\r\n    };\r\n\r\n    const handleMoveEnd = () => {\r\n      let zoom = this.state.zoom;\r\n      this.setState({ zoom: zoom });\r\n    };\r\n    let setTooltipContent = this.props.setTooltipContent;\r\n\r\n    return (\r\n      <div>\r\n        <div style={{display:'flex', justifyContent:'space-around'}}>\r\n          <input\r\n            id=\"1\"\r\n            type=\"radio\"\r\n            name=\"parameter\"\r\n            onClick={() => switchParam(1)}\r\n            checked={this.state.parameter === 1 ? true : false}\r\n          />{\" \"}\r\n          <label for=\"1\">Population</label>\r\n          <br />\r\n          <input\r\n            id=\"2\"\r\n            type=\"radio\"\r\n            name=\"parameter\"\r\n            onClick={() => switchParam(2)}\r\n            checked={this.state.parameter === 2 ? true : false}\r\n          />{\" \"}\r\n          <label for=\"2\">Malaria</label>\r\n          <br />\r\n          <input\r\n            id=\"3\"\r\n            type=\"radio\"\r\n            name=\"parameter\"\r\n            onClick={() => switchParam(3)}\r\n            checked={this.state.parameter === 3 ? true : false}\r\n          />{\" \"}\r\n          <label for=\"3\">Dengue</label>\r\n          <br />\r\n          <input\r\n            id=\"4\"\r\n            type=\"radio\"\r\n            name=\"parameter\"\r\n            onClick={() => switchParam(4)}\r\n            checked={this.state.parameter === 4 ? true : false}\r\n          />{\" \"}\r\n          <label for=\"4\">Tuberculosis</label>\r\n          <br />\r\n          <input\r\n            id=\"5\"\r\n            type=\"radio\"\r\n            name=\"parameter\"\r\n            onClick={() => switchParam(5)}\r\n            checked={this.state.parameter === 5 ? true : false}\r\n          />{\" \"}\r\n          <label for=\"5\">Diarrhoea</label>\r\n          <br />\r\n          <input\r\n            id=\"6\"\r\n            type=\"radio\"\r\n            name=\"parameter\"\r\n            onClick={() => switchParam(6)}\r\n            checked={this.state.parameter === 6 ? true : false}\r\n          />{\" \"}\r\n          <label for=\"6\">Diabetes</label>\r\n          <br />\r\n          <input\r\n            id=\"7\"\r\n            type=\"radio\"\r\n            name=\"parameter\"\r\n            onClick={() => switchParam(7)}\r\n            checked={this.state.parameter === 7 ? true : false}\r\n          />{\" \"}\r\n          <label for=\"7\">Hypertension</label>\r\n          <br />\r\n        </div>\r\n        {this.state.setData ? (\r\n          <div>\r\n            <ComposableMap\r\n              data-tip=\"\"\r\n              projectionConfig={{\r\n                center: [72.8777, 19.089], // Approximately the coordinates of Mumbai (slightly North)\r\n                scale: 90000,\r\n                translate: [1060 / 2, 310],\r\n              }}\r\n              width={1060}\r\n              height={800}\r\n            >\r\n              <ZoomableGroup\r\n                zoom={this.state.zoom}\r\n                center={this.state.coordinates}\r\n                onMoveEnd={handleMoveEnd}\r\n              >\r\n                <Geographies geography={geoUrl}>\r\n                  {({ geographies }) => (\r\n                    <>\r\n                      {geographies.map((geo) => {\r\n                        const cur = this.state.data.find(\r\n                          (data) => data.Ward === geo.properties.name\r\n                        );\r\n                        console.log(cur);\r\n                        return (\r\n                          <Geography\r\n                            key={geo.rsmKey}\r\n                            geography={geo}\r\n                            onMouseEnter={() => {\r\n                              setTooltipContent(\r\n                                `${param.attr}: ${cur[param.attr]}`\r\n                              );\r\n                            }}\r\n                            onMouseLeave={() => {\r\n                              setTooltipContent(\"\");\r\n                            }}\r\n                            style={{\r\n                              hover: {\r\n                                fill: \"#459CAF\",\r\n                                outline: \"none\",\r\n                              },\r\n                            }}\r\n                            fill={colorScale(cur ? cur[param.attr] : \"#eee\")}\r\n                          />\r\n                        );\r\n                      })}\r\n                      {geographies.map((geo) => {\r\n                        const centroid = geoCentroid(geo);\r\n                        const cur = this.state.data.find(\r\n                          (data) => data.Ward === geo.properties.name\r\n                        );\r\n\r\n                        return (\r\n                          <g key={geo.rsmKey}>\r\n                            {\r\n                              <Marker coordinates={centroid}>\r\n                                <text y=\"2\" fontSize={8} textAnchor=\"middle\">\r\n                                  {cur.Ward}\r\n                                </text>\r\n                              </Marker>\r\n                            }\r\n                          </g>\r\n                        );\r\n                      })}\r\n                    </>\r\n                  )}\r\n                </Geographies>\r\n              </ZoomableGroup>\r\n            </ComposableMap>\r\n            <div className=\"controls\">\r\n              <button onClick={handleZoomIn}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"3\"\r\n                >\r\n                  <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\r\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n                </svg>\r\n              </button>\r\n              <button onClick={handleZoomOut}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"3\"\r\n                >\r\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <span>Loading</span>\r\n        )}\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapChart;\r\n",["70","71"],"D:\\AQV\\aqv\\src\\firebase.js",[],["72","73"],"D:\\AQV\\aqv\\src\\wardMap\\mapChart_k.js",["74"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  ZoomableGroup,\r\n  Marker,\r\n} from \"react-simple-maps\";\r\nimport * as scale from \"d3-scale\";\r\nimport { csv } from \"d3-fetch\";\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport { db } from \"../firebase\";\r\n\r\nconst geoUrl = \"./mumbai_wards.json\";\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n  const [choice, setchoice] = useState(1);\r\n  const [data, setData] = useState([]); //square brackets used to destructure array, curly brackets for objects\r\n  //useState([]) is a React hook which returns the state variable eg:data and a function to update it eg:setData\r\n  const switchParam = (val) => {\r\n    setchoice(val);\r\n  };\r\n\r\n  let param = {};\r\n  switch (choice) {\r\n    case 1:\r\n      param.domain = [100000, 1000000];\r\n      param.attr = \"Population\";\r\n      break;\r\n    case 2:\r\n      param.domain = [20, 100];\r\n      param.attr = \"Malaria\";\r\n      break;\r\n    case 3:\r\n      param.domain = [0, 150];\r\n      param.attr = \"Dengue\";\r\n      break;\r\n    case 4:\r\n      param.domain = [90, 500];\r\n      param.attr = \"Tuberculosis\";\r\n      break;\r\n    case 5:\r\n      param.domain = [500, 9000];\r\n      // need to change color scheme range\r\n      param.attr = \"Diarrhoea\";\r\n      break;\r\n    case 6:\r\n      param.domain = [200, 1500];\r\n      param.attr = \"Diabetes\";\r\n      break;\r\n    case 7:\r\n      param.domain = [100, 1800];\r\n      param.attr = \"Hypertension\";\r\n      break;\r\n    default:\r\n      param.domain = [100000, 1000000];\r\n      param.attr = \"Population\";\r\n      break;\r\n  }\r\n\r\n  const colorScale = scale\r\n    .scaleQuantize()\r\n    .domain(param.domain)\r\n    .range([\r\n      \"#ffedea\",\r\n      \"#ffcec5\",\r\n      \"#ffad9f\",\r\n      \"#ff8a75\",\r\n      \"#ff5533\",\r\n      \"#e2492d\",\r\n      \"#be3d26\",\r\n      \"#9a311f\",\r\n      \"#782618\",\r\n    ]);\r\n  const loadContent = () => {\r\n    const events = db.collection(\"pop_health\");\r\n    events.get().then((querySnapshot) => {\r\n      const tempDoc = [];\r\n      querySnapshot.forEach((doc) => {\r\n        tempDoc.push(doc.data());\r\n      });\r\n      setData(tempDoc);\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    async function anyNameFunction() {\r\n      await loadContent();\r\n    }\r\n    // Execute the created function directly\r\n    anyNameFunction();\r\n  }, []);\r\n\r\n  // setting center for zoom\r\n  const [position, setPosition] = useState({\r\n    coordinates: [72.8777, 19.089],\r\n    zoom: 1,\r\n  });\r\n\r\n  function handleZoomIn() {\r\n    if (position.zoom >= 4) return;\r\n    setPosition((pos) => ({ ...pos, zoom: pos.zoom * 2 }));\r\n  }\r\n\r\n  function handleZoomOut() {\r\n    if (position.zoom <= 1) return;\r\n    setPosition((pos) => ({ ...pos, zoom: pos.zoom / 2 }));\r\n  }\r\n\r\n  function handleMoveEnd(position) {\r\n    setPosition(position);\r\n  }\r\n\r\n  return (\r\n    <div style={{ border: \"2px black solid\" }}>\r\n      {data ? (\r\n        <>\r\n          <ComposableMap\r\n            data-tip=\"\"\r\n            projectionConfig={{\r\n              center: [72.8777, 19.089], // Approximately the coordinates of Mumbai (slightly North)\r\n              scale: 90000,\r\n              translate: [1060 / 2, 310],\r\n            }}\r\n            width={1060}\r\n            height={800}\r\n          >\r\n            <ZoomableGroup\r\n              zoom={position.zoom}\r\n              center={position.coordinates}\r\n              onMoveEnd={handleMoveEnd}\r\n            >\r\n              <Geographies geography={geoUrl}>\r\n                {({ geographies }) => (\r\n                  <>\r\n                    {geographies.map((geo) => {\r\n                      const cur = data.find(\r\n                        (data) => data.Ward === geo.properties.name\r\n                      );\r\n                      return (\r\n                        <Geography\r\n                          key={geo.rsmKey}\r\n                          geography={geo}\r\n                          onMouseEnter={() => {\r\n                            setTooltipContent(\r\n                              `${param.attr}: ${cur[param.attr]}`\r\n                            );\r\n                          }}\r\n                          onMouseLeave={() => {\r\n                            setTooltipContent(\"\");\r\n                          }}\r\n                          style={{\r\n                            hover: {\r\n                              fill: \"#459CAF\",\r\n                              outline: \"none\",\r\n                            },\r\n                          }}\r\n                          fill={colorScale(cur ? cur[param.attr] : \"#eee\")}\r\n                        />\r\n                      );\r\n                    })}\r\n                    {geographies.map((geo) => {\r\n                      const centroid = geoCentroid(geo);\r\n                      const cur = data.find(\r\n                        (data) => data.Ward === geo.properties.name\r\n                      );\r\n                      return (\r\n                        <g key={geo.rsmKey}>\r\n                          {\r\n                            <Marker coordinates={centroid}>\r\n                              <text\r\n                                y=\"2\"\r\n                                fontSize={8}\r\n                                textAnchor=\"middle\"\r\n                                style={{ userSelect: \"none\" }}\r\n                              >\r\n                                {cur?.Ward}\r\n                              </text>\r\n                            </Marker>\r\n                          }\r\n                        </g>\r\n                      );\r\n                    })}\r\n                  </>\r\n                )}\r\n              </Geographies>\r\n            </ZoomableGroup>\r\n          </ComposableMap>\r\n          <div className=\"controls\">\r\n            <button onClick={handleZoomIn}>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"24\"\r\n                height=\"24\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"3\"\r\n              >\r\n                <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\r\n                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n              </svg>\r\n            </button>\r\n            <button onClick={handleZoomOut}>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"24\"\r\n                height=\"24\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"3\"\r\n              >\r\n                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <input\r\n              id=\"1\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(1)}\r\n              checked={choice === 1 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"1\">Population</label>\r\n            <br />\r\n            <input\r\n              id=\"2\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(2)}\r\n              checked={choice === 2 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"2\">Malaria</label>\r\n            <br />\r\n            <input\r\n              id=\"3\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(3)}\r\n              checked={choice === 3 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"3\">Dengue</label>\r\n            <br />\r\n            <input\r\n              id=\"4\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(4)}\r\n              checked={choice === 4 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"4\">Tuberculosis</label>\r\n            <br />\r\n            <input\r\n              id=\"5\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(5)}\r\n              checked={choice === 5 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"5\">Diarrhoea</label>\r\n            <br />\r\n            <input\r\n              id=\"6\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(6)}\r\n              checked={choice === 6 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"6\">Diabetes</label>\r\n            <br />\r\n            <input\r\n              id=\"7\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(7)}\r\n              checked={choice === 7 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"7\">Hypertension</label>\r\n            <br />\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <h2>Loading</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n",["75","76"],"D:\\AQV\\aqv\\src\\wardMap\\mapChart_o.js",["77","78","79"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  ZoomableGroup,\r\n  Marker,\r\n} from \"react-simple-maps\";\r\nimport * as scale from \"d3-scale\";\r\nimport { csv } from \"d3-fetch\";\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport { db } from \"../firebase\";\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Legend,\r\n  LabelList,\r\n} from \"recharts\";\r\n\r\nconst geoUrl = \"./mumbai_wards.json\";\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n  const [choice, setchoice] = useState(\"social_demo\");\r\n  const [data, setData] = useState([]); //square brackets used to destructure array, curly brackets for objects\r\n  //useState([]) is a React hook which returns the state variable eg:data and a function to update it eg:setData\r\n  const switchParam = (e) => {\r\n    loadContent(e.target.name, e.target.value);\r\n  };\r\n\r\n  const loadContent = (name, value) => {\r\n    console.log(name);\r\n    if (value !== \"\") {\r\n      const events = db.collection(\"wards\");\r\n\r\n      events.get().then((querySnapshot) => {\r\n        const tempDoc = [];\r\n\r\n        querySnapshot.forEach((doc) => {\r\n          let events1 = null;\r\n          if (name === \"air_quality\") {\r\n            events1 = events.doc(doc.id).collection(\"data\").doc(name);\r\n          } else {\r\n            events1 = events\r\n              .doc(doc.id)\r\n              .collection(\"data\")\r\n              .doc(name)\r\n              .collection(\"year\")\r\n              .doc(value);\r\n          }\r\n          events1.get().then((i) => {\r\n            tempDoc.push(i.data());\r\n          });\r\n        });\r\n        setData(tempDoc);\r\n        settingValues(name);\r\n      });\r\n    }\r\n  };\r\n\r\n  const settingValues = (name) => {\r\n    setchoice(name);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function anyNameFunction() {\r\n      await loadContent(\"social_demo\", \"2011\");\r\n    }\r\n    // Execute the created function directly\r\n    anyNameFunction();\r\n  }, []);\r\n\r\n  // setting center for zoom\r\n  const [position, setPosition] = useState({\r\n    coordinates: [72.8777, 19.089],\r\n    zoom: 1,\r\n  });\r\n\r\n  function handleZoomIn() {\r\n    if (position.zoom >= 4) return;\r\n    setPosition((pos) => ({ ...pos, zoom: pos.zoom * 2 }));\r\n  }\r\n\r\n  function handleZoomOut() {\r\n    if (position.zoom <= 1) return;\r\n    setPosition((pos) => ({ ...pos, zoom: pos.zoom / 2 }));\r\n  }\r\n\r\n  function handleMoveEnd(position) {\r\n    setPosition(position);\r\n  }\r\n  let param = {};\r\n  switch (choice) {\r\n    case \"social_demo\":\r\n      param.domain = [100000, 1000000];\r\n      param.attr = \"population\";\r\n      break;\r\n    case \"health\":\r\n      param.domain = [20, 100];\r\n      param.attr = \"malaria\";\r\n      break;\r\n    case \"air_quality\":\r\n      param.domain = [100, 250];\r\n      param.attr = \"AQI\";\r\n      break;\r\n  }\r\n  const colorScale = scale\r\n    .scaleQuantize()\r\n    .domain(param.domain)\r\n    .range([\r\n      \"#ffedea\",\r\n      \"#ffcec5\",\r\n      \"#ffad9f\",\r\n      \"#ff8a75\",\r\n      \"#ff5533\",\r\n      \"#e2492d\",\r\n      \"#be3d26\",\r\n      \"#9a311f\",\r\n      \"#782618\",\r\n    ]);\r\n\r\n  const card = (data) => (\r\n    <div>\r\n      <h2>Ward: {data.ward}</h2>\r\n      <h4>Population: {data.population}</h4>\r\n      <h4>Sex Ratio: {data.sex_ratio}</h4>\r\n      <h4>Literacy: {data.literacy}</h4>\r\n      <h4>Literacy Female: {data.literacy_female}</h4>\r\n      <h4>Literacy Male: {data.literacy_male}</h4>\r\n      <h4>Work Participation Female: {data.work_participation_female}</h4>\r\n      <h4>Work Participation Male: {data.work_participation_male}</h4>\r\n      <h4>Scheduled Caste: {data.scheduled_caste}</h4>\r\n      <h4>Scheduled Tribe: {data.scheduled_tribe}</h4>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div style={{ border: \"2px black solid\" }}>\r\n      {data ? (\r\n        <>\r\n          <ComposableMap\r\n            data-tip=\"\"\r\n            projectionConfig={{\r\n              center: [72.8777, 19.089], // Approximately the coordinates of Mumbai (slightly North)\r\n              scale: 90000,\r\n              translate: [1060 / 2, 310],\r\n            }}\r\n            width={1060}\r\n            height={800}\r\n          >\r\n            <ZoomableGroup\r\n              zoom={position.zoom}\r\n              center={position.coordinates}\r\n              onMoveEnd={handleMoveEnd}\r\n            >\r\n              <Geographies geography={geoUrl}>\r\n                {({ geographies }) => (\r\n                  <>\r\n                    {geographies.map((geo) => {\r\n                      const cur = data.find(\r\n                        (data) => data.ward === geo.properties.name\r\n                      );\r\n                      return (\r\n                        <Geography\r\n                          key={geo.rsmKey}\r\n                          geography={geo}\r\n                          onMouseEnter={() => {\r\n                            if (choice === \"social_demo\") {\r\n                              setTooltipContent(\"Loading\");\r\n                              if (cur) {\r\n                                setTooltipContent(card(cur));\r\n                              }\r\n                            } else if (choice === \"air_quality\") {\r\n                              setTooltipContent(\"Loading\");\r\n                              if (cur) {\r\n                                let bar = [];\r\n                                bar.push(cur);\r\n                                setTooltipContent(\r\n                                  <div style={{ textAlign: \"center\" }}>\r\n                                    <h2>Ward: {cur?.ward}</h2>\r\n                                    <h3>AQI: {cur?.AQI}</h3>\r\n                                    <BarChart\r\n                                      width={500}\r\n                                      height={400}\r\n                                      data={bar}\r\n                                    >\r\n                                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                      <XAxis dataKey=\"ward\" fontSize=\"16px\" />\r\n                                      <YAxis />\r\n                                      <Legend />\r\n                                      <Bar dataKey=\"NO2\" fill=\"#f00\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur.NO2}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".5px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                      <Bar dataKey=\"O3\" fill=\"darkgreen\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur.O3}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                      <Bar dataKey=\"PM2.5\" fill=\"#00f\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur[\"PM2.5\"]}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                      <Bar dataKey=\"PM10\" fill=\"purple\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur.PM10}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                      <Bar dataKey=\"SO2\" fill=\"orange\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur.SO2}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                    </BarChart>\r\n                                  </div>\r\n                                );\r\n                              }\r\n                            } else if (choice === \"health\") {\r\n                              setTooltipContent(\"Loading\");\r\n                              if (cur) {\r\n                                let bar = [];\r\n                                bar.push(cur);\r\n                                setTooltipContent(\r\n                                  <BarChart width={500} height={400} data={bar}>\r\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                    <XAxis dataKey=\"ward\" fontSize=\"16px\" />\r\n                                    <YAxis />\r\n                                    <Legend />\r\n                                    <Bar dataKey=\"dengue\" fill=\"#f00\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.dengue}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".5px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"diabetes\" fill=\"darkgreen\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.diabetes}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"hypertension\" fill=\"#00f\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.hypertension}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"malaria\" fill=\"purple\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.malaria}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"tuberculosis\" fill=\"orange\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.tuberculosis}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"diarrhoea\" fill=\"#f0f\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.diarrhoea}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                  </BarChart>\r\n                                );\r\n                              }\r\n                            }\r\n                          }}\r\n                          onMouseLeave={() => {\r\n                            setTooltipContent(\"\");\r\n                          }}\r\n                          style={{\r\n                            hover: {\r\n                              fill: \"#459CAF\",\r\n                              outline: \"none\",\r\n                            },\r\n                          }}\r\n                          fill={\r\n                            choice !== \"health\"\r\n                              ? colorScale(cur ? cur[param.attr] : \"#eee\")\r\n                              : \"#aaa\"\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                    {geographies.map((geo) => {\r\n                      const centroid = geoCentroid(geo);\r\n                      const cur = data.find(\r\n                        (data) => data.ward === geo.properties.name\r\n                      );\r\n                      return (\r\n                        <g key={geo.rsmKey}>\r\n                          {\r\n                            <Marker coordinates={centroid}>\r\n                              <text\r\n                                y=\"2\"\r\n                                fontSize={8}\r\n                                textAnchor=\"middle\"\r\n                                style={{ userSelect: \"none\" }}\r\n                              >\r\n                                {cur?.ward}\r\n                              </text>\r\n                            </Marker>\r\n                          }\r\n                        </g>\r\n                      );\r\n                    })}\r\n                  </>\r\n                )}\r\n              </Geographies>\r\n            </ZoomableGroup>\r\n          </ComposableMap>\r\n          <div className=\"controls\">\r\n            <button onClick={handleZoomIn}>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"24\"\r\n                height=\"24\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"3\"\r\n              >\r\n                <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\r\n                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n              </svg>\r\n            </button>\r\n            <button onClick={handleZoomOut}>\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"24\"\r\n                height=\"24\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"3\"\r\n              >\r\n                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <select\r\n              id=\"1\"\r\n              name=\"social_demo\"\r\n              onChange={(e) => switchParam(e)}\r\n              // checked={choice === 1 ? true : false}\r\n            >\r\n              <option defaultValue=\"\">Select</option>\r\n              <option value=\"2011\">2011</option>\r\n            </select>\r\n            <label for=\"1\">Social Demo</label>\r\n            <br />\r\n            <select\r\n              id=\"2\"\r\n              name=\"health\"\r\n              onChange={(e) => switchParam(e)}\r\n              // checked={choice === 2 ? true : false}\r\n            >\r\n              <option defaultValue=\"\">Select</option>\r\n\r\n              <option value=\"2014\">2014</option>\r\n              <option value=\"2015\">2015</option>\r\n            </select>\r\n\r\n            <label for=\"2\">Health</label>\r\n            <br />\r\n            <input\r\n              id=\"3\"\r\n              type=\"button\"\r\n              name=\"air_quality\"\r\n              onClick={(e) => switchParam(e)}\r\n              value=\"Air Quality\"\r\n            />\r\n            {/* <label for=\"3\">Air Quality</label> */}\r\n            <br />\r\n            {/* <input\r\n              id=\"4\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(4)}\r\n              checked={choice === 4 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"4\">Tuberculosis</label>\r\n            <br />\r\n            <input\r\n              id=\"5\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(5)}\r\n              checked={choice === 5 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"5\">Diarrhoea</label>\r\n            <br />\r\n            <input\r\n              id=\"6\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(6)}\r\n              checked={choice === 6 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"6\">Diabetes</label>\r\n            <br />\r\n            <input\r\n              id=\"7\"\r\n              type=\"radio\"\r\n              name=\"parameter\"\r\n              onClick={() => switchParam(7)}\r\n              checked={choice === 7 ? true : false}\r\n            />{\" \"}\r\n            <label for=\"7\">Hypertension</label>\r\n            <br /> */}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <h2>Loading</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n",["80","81"],"D:\\AQV\\aqv\\src\\wardMap\\mapChartSeq.js",["82","83","84","85"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  ZoomableGroup,\r\n  Marker,\r\n} from \"react-simple-maps\";\r\nimport * as scale from \"d3-scale\";\r\nimport { csv } from \"d3-fetch\";\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport { db } from \"../firebase\";\r\nimport \"./../App.css\";\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Legend,\r\n  LabelList,\r\n} from \"recharts\";\r\n\r\nconst geoUrl = \"./mumbai_wards.json\";\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n  const [choice, setchoice] = useState(\"air_quality\");\r\n  const [data, setData] = useState([]);\r\n  const [socialDemo, setsocialDemo] = useState([]);\r\n  const [health, sethealth] = useState([]);\r\n  const [layer, setLayer] = useState([]);\r\n  //square brackets used to destructure array, curly brackets for objects\r\n  //useState([]) is a React hook which returns the state variable eg:data and a function to update it eg:setData\r\n  const switchParam = (e) => {\r\n    loadContent(e.target.name, e.target.value);\r\n  };\r\n\r\n  const loadContent = (name, value) => {\r\n    // console.log(name);\r\n    if (value !== \"\") {\r\n      const docs = [];\r\n\r\n      const events = db.collection(\"wards\");\r\n      events\r\n        .doc(\"2q0Z3Lumg7zlyEIvj9kK\")\r\n        .collection(\"data\")\r\n        .get()\r\n        .then((snapshot) => {\r\n          snapshot.forEach((doc) => {\r\n            if (\r\n              doc.id === \"air_quality\" ||\r\n              doc.id === \"social_demo\" ||\r\n              doc.id === \"health\"\r\n            ) {\r\n              docs.push();\r\n            } else {\r\n              docs.push(doc.id);\r\n            }\r\n          });\r\n        });\r\n\r\n      events.get().then((querySnapshot) => {\r\n        const tempDoc = [];\r\n\r\n        querySnapshot.forEach((doc) => {\r\n          let events1 = null;\r\n          //  events.doc(doc.id).collection(\"data\").get().then((snapshot)=>)\r\n\r\n          if (name === \"social_demo\" || name === \"health\") {\r\n            events1 = events\r\n              .doc(doc.id)\r\n              .collection(\"data\")\r\n              .doc(name)\r\n              .collection(\"year\")\r\n              .doc(value);\r\n          } else {\r\n            events1 = events.doc(doc.id).collection(\"data\").doc(name);\r\n\r\n            events\r\n              .doc(doc.id)\r\n              .collection(\"data\")\r\n              .doc(\"social_demo\")\r\n              .collection(\"year\")\r\n              .get()\r\n              .then((querySnapshot) => {\r\n                let socialdemo = [];\r\n                querySnapshot.forEach((doc) => {\r\n                  socialdemo.push(doc.id);\r\n                  // setsocialDemo(socialDemo.push(doc.id));\r\n                });\r\n                if (socialDemo !== socialdemo) {\r\n                  setsocialDemo(socialdemo);\r\n                }\r\n              });\r\n\r\n            events\r\n              .doc(doc.id)\r\n              .collection(\"data\")\r\n              .doc(\"health\")\r\n              .collection(\"year\")\r\n              .get()\r\n              .then((querySnapshot) => {\r\n                let Health = [];\r\n\r\n                querySnapshot.forEach((doc) => {\r\n                  // sethealth(health.push(doc.id));\r\n                  Health.push(doc.id);\r\n                });\r\n                if (health !== Health) {\r\n                  sethealth(Health);\r\n                }\r\n              });\r\n          }\r\n          events1.get().then((i) => {\r\n            tempDoc.push(i.data());\r\n          });\r\n        });\r\n        setData(tempDoc);\r\n        settingValues(name);\r\n        // console.log(docs.length);\r\n\r\n        // docs.filter((key) => {\r\n        //   console.log(key);\r\n        //   return (\r\n        //     key === \"air_quality\" || key === \"social_demo\" || key === \"health\"\r\n        //   );\r\n        // });\r\n        if (docs !== layer || docs !== []) {\r\n          setLayer(docs);\r\n        }\r\n        // }\r\n      });\r\n    }\r\n  };\r\n\r\n  const settingValues = (name) => {\r\n    setchoice(name);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function anyNameFunction() {\r\n      await loadContent(\"air_quality\", \"Air Quality\");\r\n    }\r\n    // Execute the created function directly\r\n    anyNameFunction();\r\n  }, []);\r\n\r\n  // setting center for zoom\r\n  const [position, setPosition] = useState({\r\n    coordinates: [72.8777, 19.089],\r\n    // zoom: 1,\r\n  });\r\n\r\n  const [zoom, setzoom] = useState(1);\r\n  function handleZoomIn() {\r\n    if (position.zoom >= 4) return;\r\n    setPosition((pos) => ({ ...pos, zoom: pos.zoom * 2 }));\r\n  }\r\n\r\n  function handleZoomOut() {\r\n    if (position.zoom <= 1) return;\r\n    setPosition((pos) => ({ ...pos, zoom: pos.zoom / 2 }));\r\n  }\r\n\r\n  function handleMoveEnd(position) {\r\n    setPosition(position);\r\n  }\r\n  let param = {};\r\n  switch (choice) {\r\n    case \"social_demo\":\r\n      param.domain = [100000, 1000000];\r\n      param.attr = \"population\";\r\n      break;\r\n    case \"health\":\r\n      param.domain = [20, 100];\r\n      param.attr = \"malaria\";\r\n      break;\r\n    case \"air_quality\":\r\n      param.domain = [100, 250];\r\n      param.attr = \"AQI\";\r\n      break;\r\n    default:\r\n      param.domain = [100, 250];\r\n      param.attr = \"AQI\";\r\n      break;\r\n  }\r\n  const colorScale = scale\r\n    .scaleQuantize()\r\n    .domain(param.domain)\r\n    .range([\r\n      \"#ffedea\",\r\n      \"#ffcec5\",\r\n      \"#ffad9f\",\r\n      \"#ff8a75\",\r\n      \"#ff5533\",\r\n      \"#e2492d\",\r\n      \"#be3d26\",\r\n      \"#9a311f\",\r\n      \"#782618\",\r\n    ]);\r\n\r\n  const card = (bar) => {\r\n    let data = [];\r\n    data = { ...bar[0] };\r\n\r\n    // console.log(Object.keys(data));\r\n\r\n    return (\r\n      <div>\r\n        <h2>Ward:{data[\"ward\"]}</h2>\r\n        {\r\n          Object.keys(data)\r\n            .sort()\r\n            .map((key, i) => {\r\n              return key !== \"ward\" ? (\r\n                <h4>\r\n                  {key.toUpperCase()}:{data[key]}\r\n                </h4>\r\n              ) : null;\r\n            })\r\n          // <h2>Ward: {data.ward}</h2>\r\n          // <h4>Population: {data.population}</h4>\r\n          // <h4>Sex Ratio: {data.sex_ratio}</h4>\r\n          // <h4>Literacy: {data.literacy}</h4>\r\n          // <h4>Literacy Female: {data.literacy_female}</h4>\r\n          // <h4>Literacy Male: {data.literacy_male}</h4>\r\n          // <h4>Work Participation Female: {data.work_participation_female}</h4>\r\n          // <h4>Work Participation Male: {data.work_participation_male}</h4>\r\n          // <h4>Scheduled Caste: {data.scheduled_caste}</h4>\r\n          // <h4>Scheduled Tribe: {data.scheduled_tribe}</h4>\r\n        }\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const colour = [\"#ff6600\", \"#ff66ff\", \"#00ffff\", \"#ffcccc\", \"#ffff00\", \"#ffffff\",\"#00ccff\",\"#66ff66\"];\r\n  return (\r\n    <div style={{ border: \"2px black solid\" }}>\r\n      {data ? (\r\n        <>\r\n          <div\r\n            style={{\r\n              padding: \"5px 10px\",\r\n              position: \"fixed\",\r\n              top: \"40%\",\r\n              backgroundColor: \"#eee8\",\r\n              border: \"1px solid black\",\r\n            }}\r\n          >\r\n            <h4 style={{ margin: \"5px\" }}>Zoom: {zoom}x</h4>\r\n            <input\r\n              type=\"range\"\r\n              max={3}\r\n              min={0.5}\r\n              step={0.5}\r\n              value={zoom}\r\n              onChange={(e) => {\r\n                setzoom(+e.target.value);\r\n              }}\r\n            />\r\n            {/*\r\n              <button onClick={handleZoomIn}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"3\"\r\n                >\r\n                  <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\r\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n                </svg>\r\n              </button>\r\n              <br />\r\n             \r\n              <button onClick={handleZoomOut}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"3\"\r\n                >\r\n                  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\r\n                </svg>\r\n              </button> */}\r\n          </div>\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              backgroundColor: \"#aaab\",\r\n              top: 0,\r\n              left: 0,\r\n              borderBottom: \"1px solid #222\",\r\n              padding: \".5em\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-evenly\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <div className=\"Holder\">\r\n                <label for=\"1\">Social Demo</label>\r\n                <select\r\n                  id=\"1\"\r\n                  name=\"social_demo\"\r\n                  onChange={(e) => switchParam(e)}\r\n                  onClick={(e) => switchParam(e)}\r\n                  // checked={choice === 1 ? true : false}\r\n                >\r\n                  <option defaultValue=\"\" disabled>\r\n                    Select\r\n                  </option>\r\n                  {/* <option value=\"2011\">2011</option> */}\r\n                  {socialDemo !== []\r\n                    ? socialDemo.map((e) => {\r\n                        return <option value={e}>{e}</option>;\r\n                      })\r\n                    : null}\r\n                </select>\r\n              </div>\r\n              <div className=\"Holder\">\r\n                <label for=\"2\">Health</label>\r\n                <select\r\n                  id=\"2\"\r\n                  name=\"health\"\r\n                  onChange={(e) => switchParam(e)}\r\n                  // checked={choice === 2 ? true : false}\r\n                >\r\n                  <option defaultValue=\"\" disabled>\r\n                    Select\r\n                  </option>\r\n                  {health !== []\r\n                    ? health.map((e) => {\r\n                        return <option value={e}>{e}</option>;\r\n                      })\r\n                    : null}\r\n\r\n                  {/* <option value=\"2014\">2014</option>\r\n              <option value=\"2015\">2015</option> */}\r\n                  {/* {\r\n                  if()\r\n                } */}\r\n                </select>\r\n              </div>\r\n              <input\r\n                style={{\r\n                  fontSize: \"1em\",\r\n                  fontWeight: \"bold\",\r\n                  backgroundColor: \"#3399ff\",\r\n                  borderRadius: \"10px\",\r\n                  border: \"1px solid black\",\r\n                  padding: \".6em 1em\",\r\n                  color:\"white\"\r\n                }}\r\n                id=\"3\"\r\n                type=\"button\"\r\n                name=\"air_quality\"\r\n                onClick={(e) => switchParam(e)}\r\n                value=\"Air Quality\"\r\n              />\r\n              {layer !== []\r\n                ? layer.map((key, i) => {\r\n                    return (\r\n                      <input\r\n                        key={key + i}\r\n                        value={key.toUpperCase()}\r\n                        name={key}\r\n                        type=\"button\"\r\n                        style={{\r\n                          fontSize: \"1em\",\r\n                          fontWeight: \"bold\",\r\n                          backgroundColor: \"#3399ff\",\r\n                          borderRadius: \"10px\",\r\n                          border: \"1px solid black\",\r\n                          padding: \".6em 1em\",\r\n                          color:\"white\"\r\n                        }}\r\n                        onClick={(e) => switchParam(e)}\r\n                      />\r\n                    );\r\n                  })\r\n                : null}\r\n            </div>\r\n            <hr />\r\n            <h2\r\n              style={{\r\n                margin: 0,\r\n                padding: 0,\r\n                textAlign: \"center\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              {choice}\r\n            </h2>\r\n          </div>\r\n          <ComposableMap\r\n            data-tip=\"\"\r\n            projectionConfig={{\r\n              center: [72.8777, 19.089], // Approximately the coordinates of Mumbai (slightly North)\r\n              scale: 90000,\r\n              translate: [1060 / 2, 310],\r\n            }}\r\n            width={1060}\r\n            height={800}\r\n            style={{ border: \"1px solid black\" }}\r\n          >\r\n            <ZoomableGroup\r\n              zoom={zoom}\r\n              center={position.coordinates}\r\n              onMoveEnd={handleMoveEnd}\r\n            >\r\n              <Geographies geography={geoUrl}>\r\n                {({ geographies }) => (\r\n                  <>\r\n                    {geographies.map((geo) => {\r\n                      const cur = data.find(\r\n                        (data) => data.ward === geo.properties.name\r\n                      );\r\n                      return (\r\n                        <Geography\r\n                          key={geo.rsmKey}\r\n                          geography={geo}\r\n                          onMouseEnter={() => {\r\n                            // console.log(health, socialDemo);\r\n\r\n                            // if (choice === \"social_demo\") {\r\n                            //   setTooltipContent(\"Loading\");\r\n                            //   if (cur) {\r\n                            //     let bar = [];\r\n                            //     bar.push(cur);\r\n                            //     setTooltipContent(card(bar));\r\n                            //   }\r\n                            // }\r\n                            if (choice === \"air_quality\") {\r\n                              setTooltipContent(\"Loading\");\r\n                              if (cur) {\r\n                                let bar = [];\r\n                                bar.push(cur);\r\n                                let Bart = { ...bar[0] };\r\n                                // console.log(Bart);\r\n\r\n                                setTooltipContent(\r\n                                  <div style={{ textAlign: \"center\" }}>\r\n                                    <h2>Ward: {cur?.ward}</h2>\r\n                                    <h3>AQI: {cur?.AQI}</h3>\r\n                                    <BarChart\r\n                                      width={500}\r\n                                      height={400}\r\n                                      data={bar}\r\n                                    >\r\n                                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                      <XAxis dataKey=\"ward\" fontSize=\"16px\" />\r\n                                      <YAxis />\r\n                                      <Legend />\r\n                                      {Object.keys(Bart)\r\n                                        .sort()\r\n                                        .map((key, i) => {\r\n                                          return (\r\n                                            <Bar dataKey={key} fill={colour[i]}>\r\n                                              <LabelList\r\n                                                fill=\"#fff\"\r\n                                                datakey=\"ward\"\r\n                                                content={Bart[key]}\r\n                                                fontWeight=\"bold\"\r\n                                                strokeWidth=\".5px\"\r\n                                                stroke=\"black\"\r\n                                              />\r\n                                            </Bar>\r\n                                          );\r\n                                        })}\r\n                                      {/* <Bar dataKey=\"O3\" fill=\"darkgreen\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur.O3}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                      <Bar dataKey=\"PM2.5\" fill=\"#00f\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur[\"PM2.5\"]}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                      <Bar dataKey=\"PM10\" fill=\"purple\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur.PM10}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar>\r\n                                      <Bar dataKey=\"SO2\" fill=\"orange\">\r\n                                        <LabelList\r\n                                          fill=\"#fff\"\r\n                                          datakey=\"ward\"\r\n                                          content={cur.SO2}\r\n                                          fontWeight=\"bold\"\r\n                                          strokeWidth=\".3px\"\r\n                                          fontSize=\"16px\"\r\n                                          stroke=\"black\"\r\n                                        />\r\n                                      </Bar> */}\r\n                                    </BarChart>\r\n                                  </div>\r\n                                );\r\n                              }\r\n                            } else if (choice === \"health\") {\r\n                              setTooltipContent(\"Loading\");\r\n                              if (cur) {\r\n                                let bar = [];\r\n                                bar.push(cur);\r\n                                let Bart = { ...bar[0] };\r\n                                // console.log(Bart);\r\n                                setTooltipContent(\r\n                                  <BarChart width={500} height={400} data={bar}>\r\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                    <XAxis dataKey=\"ward\" fontSize=\"16px\" />\r\n                                    <YAxis />\r\n                                    <Legend />\r\n                                    {Object.keys(Bart)\r\n                                      .sort()\r\n                                      .map((key, i) => {\r\n                                        return (\r\n                                          <Bar dataKey={key} fill={colour[i]}>\r\n                                            <LabelList\r\n                                              fill=\"#fff\"\r\n                                              datakey=\"ward\"\r\n                                              content={Bart[key]}\r\n                                              fontWeight=\"bold\"\r\n                                              strokeWidth=\".3px\"\r\n                                              stroke=\"black\"\r\n                                            />\r\n                                          </Bar>\r\n                                        );\r\n                                      })}\r\n                                    {/* <Bar dataKey=\"diabetes\" fill=\"darkgreen\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.diabetes}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"hypertension\" fill=\"#00f\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.hypertension}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"malaria\" fill=\"purple\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.malaria}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"tuberculosis\" fill=\"orange\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.tuberculosis}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar>\r\n                                    <Bar dataKey=\"diarrhoea\" fill=\"#f0f\">\r\n                                      <LabelList\r\n                                        fill=\"#fff\"\r\n                                        datakey=\"ward\"\r\n                                        content={cur.diarrhoea}\r\n                                        fontWeight=\"bold\"\r\n                                        strokeWidth=\".3px\"\r\n                                        fontSize=\"16px\"\r\n                                        stroke=\"black\"\r\n                                      />\r\n                                    </Bar> */}\r\n                                  </BarChart>\r\n                                );\r\n                              }\r\n                            } else {\r\n                              setTooltipContent(\"Loading\");\r\n                              if (cur) {\r\n                                let bar = [];\r\n                                bar.push(cur);\r\n                                setTooltipContent(card(bar));\r\n                              }\r\n                            }\r\n                          }}\r\n                          onMouseLeave={() => {\r\n                            setTooltipContent(\"\");\r\n                          }}\r\n                          style={{\r\n                            hover: {\r\n                              fill: \"#459CAF\",\r\n                              outline: \"none\",\r\n                            },\r\n                          }}\r\n                          fill={\r\n                            choice === \"air_quality\" || choice === \"social_demo\"\r\n                              ? colorScale(cur ? cur[param.attr] : \"#eee\")\r\n                              : \"#aaa\"\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                    {geographies.map((geo) => {\r\n                      const centroid = geoCentroid(geo);\r\n                      const cur = data.find(\r\n                        (data) => data.ward === geo.properties.name\r\n                      );\r\n                      return (\r\n                        <g key={geo.rsmKey}>\r\n                          {\r\n                            <Marker coordinates={centroid}>\r\n                              <text\r\n                                y=\"2\"\r\n                                fontSize={8}\r\n                                textAnchor=\"middle\"\r\n                                style={{ userSelect: \"none\" }}\r\n                              >\r\n                                {cur?.ward}\r\n                              </text>\r\n                            </Marker>\r\n                          }\r\n                        </g>\r\n                      );\r\n                    })}\r\n                  </>\r\n                )}\r\n              </Geographies>\r\n            </ZoomableGroup>\r\n          </ComposableMap>\r\n        </>\r\n      ) : (\r\n        <h2>Loading</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":15,"column":8,"nodeType":"92","messageId":"93","endLine":15,"endColumn":15},{"ruleId":"90","severity":1,"message":"94","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"95","line":6,"column":3,"nodeType":"92","messageId":"93","endLine":6,"endColumn":16},{"ruleId":"90","severity":1,"message":"96","line":8,"column":13,"nodeType":"92","messageId":"93","endLine":8,"endColumn":15},{"ruleId":"86","replacedBy":"97"},{"ruleId":"88","replacedBy":"98"},{"ruleId":"90","severity":1,"message":"99","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"100","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"101","line":10,"column":10,"nodeType":"92","messageId":"93","endLine":10,"endColumn":13},{"ruleId":"90","severity":1,"message":"102","line":12,"column":8,"nodeType":"92","messageId":"93","endLine":12,"endColumn":13},{"ruleId":"86","replacedBy":"103"},{"ruleId":"88","replacedBy":"104"},{"ruleId":"86","replacedBy":"105"},{"ruleId":"88","replacedBy":"106"},{"ruleId":"90","severity":1,"message":"101","line":10,"column":10,"nodeType":"92","messageId":"93","endLine":10,"endColumn":13},{"ruleId":"86","replacedBy":"107"},{"ruleId":"88","replacedBy":"108"},{"ruleId":"90","severity":1,"message":"101","line":10,"column":10,"nodeType":"92","messageId":"93","endLine":10,"endColumn":13},{"ruleId":"109","severity":1,"message":"110","line":73,"column":6,"nodeType":"111","endLine":73,"endColumn":8,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":95,"column":3,"nodeType":"115","messageId":"116","endLine":108,"endColumn":4},{"ruleId":"86","replacedBy":"117"},{"ruleId":"88","replacedBy":"118"},{"ruleId":"90","severity":1,"message":"101","line":10,"column":10,"nodeType":"92","messageId":"93","endLine":10,"endColumn":13},{"ruleId":"109","severity":1,"message":"110","line":146,"column":6,"nodeType":"111","endLine":146,"endColumn":8,"suggestions":"119"},{"ruleId":"90","severity":1,"message":"120","line":155,"column":12,"nodeType":"92","messageId":"93","endLine":155,"endColumn":24},{"ruleId":"90","severity":1,"message":"121","line":160,"column":12,"nodeType":"92","messageId":"93","endLine":160,"endColumn":25},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'WardMap' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'ZoomableGroup' is defined but never used.","'d3' is defined but never used.",["122"],["123"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'csv' is defined but never used.","'axios' is defined but never used.",["122"],["123"],["122"],["123"],["122"],["123"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadContent'. Either include it or remove the dependency array.","ArrayExpression",["124"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["122"],["123"],["125"],"'handleZoomIn' is defined but never used.","'handleZoomOut' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"126","fix":"128"},"Update the dependencies array to be: [loadContent]",{"range":"129","text":"130"},{"range":"131","text":"130"},[1951,1953],"[loadContent]",[4151,4153]]